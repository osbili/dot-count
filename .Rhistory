if (min(d) > r){
# updata class
class.point <- rbind(class.point, coor[i, ])
# updata membership
membership[i] <- length(class.point[,1])
} else {
membership[i] <- which.min(d)
}
}
# class point update
class.point <- aggregate(coor, list(membership), mean)[,2:3]
# closest distance between classes
k <- length(class.point[,1])
d <- min(as.vector(dist(class.point, method = "euclidean")))
# do this until the closest distance is larger than radius
if (d > r) break
else {
a <- which.min(as.vector(dist(class.point, method = "euclidean")))
nearClass <- which( (a - cumsum((k-1):1)) < 0 )[1]
class.point <- class.point[-nearClass, ]
row.names(class.point) <- 1:(k-1)
}
}
#| label: Denoise and check image
tmp[tmp < quantile(tmp[tmp>0], 0.99)] <- 0
library("magick")
library("jpeg")
library("imager")
#| label: Set directory and load picture
mainDir <- "/Users/can/Desktop/dot count"
setwd(mainDir)
tmp <- load.image("test.jpeg")
plot(tmp, axes = FALSE)
df <- as.data.frame(tmp) %>% subset(value > 0.1)
centers <- dplyr::group_by(df,value) %>%
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
coor <- as.matrix(centers[,2:3])
head(coor)
l <- length(coor[,1])
membership <- rep(0, l)
class.point <- coor[1,]
# Distance function between point and class.points set
dist.m <- function(x, y){
if (is.null(dim(y))) sqrt( sum((x-y)^2) )
else sqrt(rowSums(sweep(y, 2, x)^2))
}
r <- 10
while(TRUE){
for (i in 1:l){
d <- dist.m(coor[i,], class.point)
if (min(d) > r){
# updata class
class.point <- rbind(class.point, coor[i, ])
# updata membership
membership[i] <- length(class.point[,1])
} else {
membership[i] <- which.min(d)
}
}
# class point update
class.point <- aggregate(coor, list(membership), mean)[,2:3]
# closest distance between classes
k <- length(class.point[,1])
d <- min(as.vector(dist(class.point, method = "euclidean")))
# do this until the closest distance is larger than radius
if (d > r) break
else {
a <- which.min(as.vector(dist(class.point, method = "euclidean")))
nearClass <- which( (a - cumsum((k-1):1)) < 0 )[1]
class.point <- class.point[-nearClass, ]
row.names(class.point) <- 1:(k-1)
}
}
df <- as.data.frame(tmp) |>  subset(value > 0.1)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
#| label: Denoise and check image
tmp[tmp < quantile(tmp[tmp>0], 0.99)] <- 0
tmp <- isoblur(tmp, 2)
# Check the result
plot(tmp, axes = FALSE)
df <- as.data.frame(tmp) |>  subset(value > 0.1)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
coor <- as.matrix(centers[,2:3])
head(coor)
df <- as.data.frame(tmp) |>  subset(value > 0.4)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
df <- as.data.frame(tmp) |>  subset(value > 0.9)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
df <- as.data.frame(tmp) |>  subset(value > 2)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
df <- as.data.frame(tmp) |>  subset(value > 1)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
df <- as.data.frame(tmp) |>  subset(value > 0.2)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="red"))
df <- as.data.frame(tmp) |>  subset(value > 0.2)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="black"))
df <- as.data.frame(tmp) |>  subset(value > 0.2)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="white"))
library("jpg")
install.packages("jpg")
#| label: Set directory and load picture
mainDir <- "/Users/can/Desktop/dot count"
setwd(mainDir)
tmp <- load.image("test.jpeg")
#| label: Set directory and load picture
mainDir <- "/Users/can/Desktop/dot count"
setwd(mainDir)
tmp <- load.image("test.jpg")
plot(tmp, axes = FALSE)
#| label: Denoise and check image
tmp[tmp < quantile(tmp[tmp>0], 0.99)] <- 0
tmp <- isoblur(tmp, 2)
# Check the result
plot(tmp, axes = FALSE)
df <- as.data.frame(tmp) |>  subset(value > 0.2)
centers <- dplyr::group_by(df,value) |>
dplyr::summarise(mx=mean(x),my=mean(y))
#check the result
plot(tmp)
with(centers, points(mx, my, col="white"))
coor <- as.matrix(centers[,2:3])
head(coor)
l <- length(coor[,1])
membership <- rep(0, l)
class.point <- coor[1,]
# Distance function between point and class.points set
dist.m <- function(x, y){
if (is.null(dim(y))) sqrt( sum((x-y)^2) )
else sqrt(rowSums(sweep(y, 2, x)^2))
}
r <- 10
while(TRUE){
for (i in 1:l){
d <- dist.m(coor[i,], class.point)
if (min(d) > r){
# updata class
class.point <- rbind(class.point, coor[i, ])
# updata membership
membership[i] <- length(class.point[,1])
} else {
membership[i] <- which.min(d)
}
}
# class point update
class.point <- aggregate(coor, list(membership), mean)[,2:3]
# closest distance between classes
k <- length(class.point[,1])
d <- min(as.vector(dist(class.point, method = "euclidean")))
# do this until the closest distance is larger than radius
if (d > r) break
else {
a <- which.min(as.vector(dist(class.point, method = "euclidean")))
nearClass <- which( (a - cumsum((k-1):1)) < 0 )[1]
class.point <- class.point[-nearClass, ]
row.names(class.point) <- 1:(k-1)
}
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
image <- readImage("/Users/can/Desktop/dot count/test.jpg")
gray_image <- channel(image, "gray")
bw_image <- gray_image > 0.5
labeled_image <- bwlabel(bw_image)
number_of_dots <- max(labeled_image)
print(number_of_dots)
image
display(image, method = "raster")
display(image, method = "raster")
gray_image <- channel(image, "gray")
display(image, method = "raster")
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")
bw_image <- gray_image > 0.5
display(bw_image, method = "raster")
bw_image <- gray_image > 0.4
display(bw_image, method = "raster")
bw_image <- gray_image > 0.3
display(bw_image, method = "raster")
bw_image <- gray_image > 0.6
display(bw_image, method = "raster")
bw_image <- gray_image > 0.55
display(bw_image, method = "raster")
display(gray_image, method = "raster")
bw_image <- gray_image > 0.55
display(bw_image, method = "raster")
eroded_image <- erode(bw_image, makeBrush(5, shape = 'disc'))  # Erosion to separate dots
display(eroded_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
eroded_image <- erode(bw_image, makeBrush(4, shape = 'disc'))  # Erosion to separate dots
display(eroded_image, method = "raster")
eroded_image <- erode(bw_image, makeBrush(6, shape = 'disc'))  # Erosion to separate dots
display(eroded_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.02)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.001)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.005)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 10, h = 10, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 10, h = 10, offset = 0.05)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 10, h = 10, offset = 0.07)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 5, h = 5, offset = 0.07)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 5, h = 5, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 5, h = 5, offset = 0.1)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 3, h = 3, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 1, h = 1, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 1, h = 1, offset = 0.02)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 1, h = 1, offset = 0.03)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 2, h = 2, offset = 0.03)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 3, h = 3, offset = 0.03)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 4, h = 4, offset = 0.03)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 4, h = 4, offset = 0.05)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 4, h = 4, offset = 0.07)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 4, h = 4, offset = 0.01)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 4, h = 4, offset = 0.02)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 4, h = 4, offset = 0.03)  # Adaptive thresholding
display(bw_image, method = "raster")
bw_image <- thresh(gray_image, w = 4, h = 4, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")
eroded_image <- erode(bw_image, makeBrush(, shape = 'disc'))  # Erosion to separate dots
dist_map <- distmap(bw_image)
display(normalize(dist_map), method = "raster")
bw_image <- thresh(gray_image, w = 5, h = 5, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")
dist_map <- distmap(bw_image)
display(normalize(dist_map), method = "raster")
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")
dist_map <- distmap(bw_image)
display(normalize(dist_map), method = "raster")
wshed_image <- watershed(dist_map, tolerance = 1)  # Use tolerance to control separation
display(colorLabels(wshed_image), method = "raster")
number_of_dots <- max(wshed_image)
print(paste("Number of dots:", number_of_dots))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
image <- readImage("/Users/can/Desktop/dot count/test.jpg")
display(image, method = "raster")
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")
dist_map <- distmap(bw_image)
display(normalize(dist_map), method = "raster")
wshed_image <- watershed(dist_map, tolerance = 1)  # Use tolerance to control separation
display(colorLabels(wshed_image), method = "raster")
number_of_dots <- max(wshed_image)
print(paste("Number of dots:", number_of_dots))
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")
dist_map <- distmap(bw_image)
display(normalize(dist_map), method = "raster")
number_of_dots <- max(wshed_image)
print(paste("Number of dots:", number_of_dots))
local_maxima <- makeBrush(3, shape = 'diamond')
maxima_image <- filter2(dist_map, local_maxima) == dist_map
maxima_image <- maxima_image * bw_image  # Mask to keep maxima only inside binary regions
display(maxima_image, method = "raster")
local_maxima <- makeBrush(3, shape = 'diamond')
maxima_image <- filter2(dist_map, local_maxima) == dist_map
maxima_image <- maxima_image * bw_image  # Mask to keep maxima only inside binary regions
display(maxima_image, method = "raster")
library(EBImage)
#| label: Load the image
image <- readImage("/Users/can/Desktop/dot count/test.jpg")
display(image, method = "raster")  # Display the original image
#| label: Convert to grayscale
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")  # Display the grayscale image
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Compute the distance map of the binary image
dist_map <- distmap(bw_image)
display(normalize(dist_map), method = "raster")  # Display the normalized distance map
#| label: Identify local maxima in the distance map (likely fly centers)
local_maxima <- makeBrush(3, shape = 'diamond')
maxima_image <- filter2(dist_map, local_maxima) == dist_map
maxima_image <- maxima_image * bw_image  # Mask to keep maxima only inside binary regions
display(maxima_image, method = "raster")  # Display the local maxima
#| label: Label the maxima and count the number of flies
labeled_maxima <- bwlabel(maxima_image)
number_of_flies <- max(labeled_maxima)
#| label: Print the number of flies
print(paste("Number of flies:", number_of_flies))
#| label: Label the maxima and count the number of flies
labeled_image <- bwlabel(bw_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
labeled_image <- bwlabel(bw_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
print(paste("Number of flies:", number_of_flies))
#| label: Load the image
image <- readImage("/Users/can/Desktop/dot count/test.jpg")
display(image, method = "raster")  # Display the original image
#| label: Convert to grayscale
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")  # Display the grayscale image
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
labeled_image <- bwlabel(bw_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
print(paste("Number of flies:", number_of_flies))
#| label: Load the image
image <- readImage("/Users/can/Desktop/dot count/test.jpg")
display(image, method = "raster")  # Display the original image
#| label: Convert to grayscale
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")  # Display the grayscale image
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
labeled_image <- bwlabel(bw_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
print(paste("Number of flies:", number_of_flies))
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Load the image
image <- readImage("/Users/can/Desktop/dot count/test.jpg")
display(image, method = "raster")  # Display the original image
#| label: Convert to grayscale
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")  # Display the grayscale image
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 6, h = 6, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
labeled_image <- bwlabel(bw_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(5, shape = 'disc'))
display(cleaned_image, method = "raster")
labeled_image <- bwlabel(cleaned_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 7, h = 7, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(5, shape = 'disc'))
display(cleaned_image, method = "raster")
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(5, shape = 'disc'))
display(cleaned_image, method = "raster")
labeled_image <- bwlabel(cleaned_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(6, shape = 'disc'))
display(cleaned_image, method = "raster")
labeled_image <- bwlabel(cleaned_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(10, shape = 'disc'))
display(cleaned_image, method = "raster")
labeled_image <- bwlabel(cleaned_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(9, shape = 'disc'))
display(cleaned_image, method = "raster")
labeled_image <- bwlabel(cleaned_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Load the image
image <- readImage("/Users/can/Desktop/dot count/test1.jpg")
display(image, method = "raster")  # Display the original image
#| label: Convert to grayscale
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")  # Display the grayscale image
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(9, shape = 'disc'))
display(cleaned_image, method = "raster")
#| label: Load the image
image <- readImage("/Users/can/Desktop/dot count/test1.jpg")
display(image, method = "raster")  # Display the original image
#| label: Convert to grayscale
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")  # Display the grayscale image
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(9, shape = 'disc'))
display(cleaned_image, method = "raster")
labeled_image <- bwlabel(cleaned_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Load the image
image <- readImage("/Users/can/Desktop/dot count/test1.jpg")
display(image, method = "raster")  # Display the original image
#| label: Convert to grayscale
gray_image <- channel(image, "gray")
display(gray_image, method = "raster")  # Display the grayscale image
#| label: Apply adaptive thresholding to get a binary image
bw_image <- thresh(gray_image, w = 15, h = 15, offset = 0.04)  # Adaptive thresholding
display(bw_image, method = "raster")  # Display the binary image
#| label: Label the maxima and count the number of flies
cleaned_image <- opening(bw_image, makeBrush(9, shape = 'disc'))
display(cleaned_image, method = "raster")
labeled_image <- bwlabel(cleaned_image)
display(colorLabels(labeled_image), method = "raster")
#| label: Print the number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
#| label: Count and print number of flies
number_of_flies <- max(labeled_image)
print(paste("Number of flies:", number_of_flies))
